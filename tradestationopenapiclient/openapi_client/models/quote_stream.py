# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.market_flags import MarketFlags

class QuoteStream(BaseModel):
    """
    Quote returns current price data for a symbol.
    """
    ask: Optional[StrictStr] = Field(None, alias="Ask", description="The price at which a security, futures contract, or other financial instrument is offered for sale.")
    ask_size: Optional[StrictStr] = Field(None, alias="AskSize", description="The number of trading units that prospective sellers are prepared to sell.")
    bid: Optional[StrictStr] = Field(None, alias="Bid", description="The highest price a prospective buyer is prepared to pay at a particular time for a trading unit of a given symbol.")
    bid_size: Optional[StrictStr] = Field(None, alias="BidSize", description="The number of trading units that prospective buyers are prepared to purchase for a symbol.")
    close: Optional[StrictStr] = Field(None, alias="Close", description="The closing price of the day.")
    daily_open_interest: Optional[StrictStr] = Field(None, alias="DailyOpenInterest", description="The total number of open or outstanding (not closed or delivered) options and/or futures contracts that exist on a given day, delivered on a particular day.")
    error: Optional[StrictStr] = Field(None, alias="Error", description="Message if there's an error.")
    high: Optional[StrictStr] = Field(None, alias="High", description="The highest price of the day.")
    low: Optional[StrictStr] = Field(None, alias="Low", description="The lowest price of the day.")
    high52_week: Optional[StrictStr] = Field(None, alias="High52Week", description="The highest price of the past 52 weeks.")
    high52_week_timestamp: Optional[StrictStr] = Field(None, alias="High52WeekTimestamp", description="Date of the highest price in the past 52 week.")
    last: Optional[StrictStr] = Field(None, alias="Last", description="The last price at which the symbol traded.")
    min_price: Optional[StrictStr] = Field(None, alias="MinPrice", description="The minimum price a commodity futures contract may be traded for the current session.")
    max_price: Optional[StrictStr] = Field(None, alias="MaxPrice", description="The maximum price a commodity futures contract may be traded for the current session.")
    first_notice_date: Optional[StrictStr] = Field(None, alias="FirstNoticeDate", description="The day after which an investor who has purchased a futures contract may be required to take physical delivery of the contracts underlying commodity.")
    last_trading_date: Optional[StrictStr] = Field(None, alias="LastTradingDate", description="The final day that a futures contract may trade or be closed out before the delivery of the underlying asset or cash settlement must occur.")
    low52_week: Optional[StrictStr] = Field(None, alias="Low52Week", description="The lowest price of the past 52 weeks.")
    low52_week_timestamp: Optional[StrictStr] = Field(None, alias="Low52WeekTimestamp", description="Date of the lowest price of the past 52 weeks.")
    market_flags: Optional[MarketFlags] = Field(None, alias="MarketFlags")
    net_change: Optional[StrictStr] = Field(None, alias="NetChange", description="The difference between the last displayed price and the previous day's close.")
    net_change_pct: Optional[StrictStr] = Field(None, alias="NetChangePct", description="The percentage difference between the current price and previous day's close,expressed as a decimal. For example, a price change from 100 to 103.5 would be expressed as `\"0.035\"`.")
    open: Optional[StrictStr] = Field(None, alias="Open", description="The opening price of the day.")
    previous_close: Optional[StrictStr] = Field(None, alias="PreviousClose", description="The closing price of the previous day.")
    previous_volume: Optional[StrictStr] = Field(None, alias="PreviousVolume", description="Daily volume of the previous day.")
    restrictions: Optional[conlist(StrictStr)] = Field(None, alias="Restrictions", description="Restriction if any returns array.")
    symbol: Optional[StrictStr] = Field(None, alias="Symbol", description="The name identifying the financial instrument for which the data is displayed.")
    tick_size_tier: Optional[StrictStr] = Field(None, alias="TickSizeTier", description="Trading increment based on a level group.")
    trade_time: Optional[StrictStr] = Field(None, alias="TradeTime", description="Time of the last trade.")
    volume: Optional[StrictStr] = Field(None, alias="Volume", description="Daily volume in shares/contracts.")
    last_size: Optional[StrictStr] = Field(None, alias="LastSize", description="Number of contracts/shares last traded.")
    last_venue: Optional[StrictStr] = Field(None, alias="LastVenue", description="Exchange name of last trade.")
    vwap: Optional[StrictStr] = Field(None, alias="VWAP", description="VWAP (Volume Weighted Average Price) is a measure of the price at which the majority of a given day's trading in a given security took place. It is calculated by adding the dollars traded for the average price of the bar throughout the day (\"avgprice\" x \"number of shares traded\" per bar) and dividing by the total shares traded for the day. The VWAP is calculated throughout the day by the TradeStation data-network.")
    __properties = ["Ask", "AskSize", "Bid", "BidSize", "Close", "DailyOpenInterest", "Error", "High", "Low", "High52Week", "High52WeekTimestamp", "Last", "MinPrice", "MaxPrice", "FirstNoticeDate", "LastTradingDate", "Low52Week", "Low52WeekTimestamp", "MarketFlags", "NetChange", "NetChangePct", "Open", "PreviousClose", "PreviousVolume", "Restrictions", "Symbol", "TickSizeTier", "TradeTime", "Volume", "LastSize", "LastVenue", "VWAP"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QuoteStream:
        """Create an instance of QuoteStream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of market_flags
        if self.market_flags:
            _dict['MarketFlags'] = self.market_flags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QuoteStream:
        """Create an instance of QuoteStream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QuoteStream.parse_obj(obj)

        _obj = QuoteStream.parse_obj({
            "ask": obj.get("Ask"),
            "ask_size": obj.get("AskSize"),
            "bid": obj.get("Bid"),
            "bid_size": obj.get("BidSize"),
            "close": obj.get("Close"),
            "daily_open_interest": obj.get("DailyOpenInterest"),
            "error": obj.get("Error"),
            "high": obj.get("High"),
            "low": obj.get("Low"),
            "high52_week": obj.get("High52Week"),
            "high52_week_timestamp": obj.get("High52WeekTimestamp"),
            "last": obj.get("Last"),
            "min_price": obj.get("MinPrice"),
            "max_price": obj.get("MaxPrice"),
            "first_notice_date": obj.get("FirstNoticeDate"),
            "last_trading_date": obj.get("LastTradingDate"),
            "low52_week": obj.get("Low52Week"),
            "low52_week_timestamp": obj.get("Low52WeekTimestamp"),
            "market_flags": MarketFlags.from_dict(obj.get("MarketFlags")) if obj.get("MarketFlags") is not None else None,
            "net_change": obj.get("NetChange"),
            "net_change_pct": obj.get("NetChangePct"),
            "open": obj.get("Open"),
            "previous_close": obj.get("PreviousClose"),
            "previous_volume": obj.get("PreviousVolume"),
            "restrictions": obj.get("Restrictions"),
            "symbol": obj.get("Symbol"),
            "tick_size_tier": obj.get("TickSizeTier"),
            "trade_time": obj.get("TradeTime"),
            "volume": obj.get("Volume"),
            "last_size": obj.get("LastSize"),
            "last_venue": obj.get("LastVenue"),
            "vwap": obj.get("VWAP")
        })
        return _obj


