# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Wallet(BaseModel):
    """
    Returns the details of a currency holding.
    """
    account_id: Optional[StrictStr] = Field(None, alias="AccountID", description="TradeStation Account ID.")
    balance: Optional[StrictStr] = Field(None, alias="Balance", description="The balance of the specific currency in the account.")
    balance_available_for_trading: Optional[StrictStr] = Field(None, alias="BalanceAvailableForTrading", description="The amount of cash in the account that can be used to make trades.")
    balance_available_for_withdrawal: Optional[StrictStr] = Field(None, alias="BalanceAvailableForWithdrawal", description="The amount of cash in the account that can be withdrawn.")
    currency: Optional[StrictStr] = Field(None, alias="Currency", description="The currency of the wallet.")
    status: Optional[StrictStr] = Field(None, alias="Status", description="The status of this wallet - Active, Suspended.")
    unrealized_profit_loss_account_currency: Optional[StrictStr] = Field(None, alias="UnrealizedProfitLossAccountCurrency", description="The unrealized profit or loss for the account wallet.")
    __properties = ["AccountID", "Balance", "BalanceAvailableForTrading", "BalanceAvailableForWithdrawal", "Currency", "Status", "UnrealizedProfitLossAccountCurrency"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Wallet:
        """Create an instance of Wallet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Wallet:
        """Create an instance of Wallet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Wallet.parse_obj(obj)

        _obj = Wallet.parse_obj({
            "account_id": obj.get("AccountID"),
            "balance": obj.get("Balance"),
            "balance_available_for_trading": obj.get("BalanceAvailableForTrading"),
            "balance_available_for_withdrawal": obj.get("BalanceAvailableForWithdrawal"),
            "currency": obj.get("Currency"),
            "status": obj.get("Status"),
            "unrealized_profit_loss_account_currency": obj.get("UnrealizedProfitLossAccountCurrency")
        })
        return _obj


