# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class TimeInForceRequest(BaseModel):
    """
    TimeInForce defines the duration and expiration timestamp. For `USDCUSD` Crypto orders, `IOC` is required.
    """
    duration: StrictStr = Field(..., alias="Duration", description="The length of time for which an order will remain valid in the market. Available values are: DAY, DYP, GTC, GCP, GTD, GDP, OPG, CLO, IOC, FOK, 1, 3, and 5. Different asset classes and routes may have restrictions on the durations they accept. * DAY - Day, valid until the end of the regular trading session. * DYP - Day Plus; valid until the end of the extended trading session. * GTC - Good till canceled. Maximum lifespan is 90 calendar days. * GCP - Good till canceled plus. Maximum lifespan is 90 calendar days. * GTD - Good through date. Maximum lifespan is 90 calendar days. * GDP - Good through date plus. Maximum lifespan is 90 calendar days. * OPG - At the opening; only valid for listed stocks at the opening session Price. * CLO - On Close; orders that target the closing session of an exchange. * IOC - Immediate or Cancel; filled immediately or canceled, partial fills are accepted. * FOK - Fill or Kill; orders are filled entirely or canceled, partial fills are not accepted. * 1 - 1 minute; expires after the 1 minute. Only valid for equity orders. * 3 - 3 minutes; expires after the 3 minutes. Only valid for equity orders. * 5 - 5 minutes; expires after the 5 minutes. Only valid for equity orders. ")
    expiration: Optional[Dict[str, Any]] = Field(None, alias="Expiration", description="Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard. Only applicable to GTD and GDP orders. The full timestamp is required, but only the date portion is relevant. E.g. `2023-01-01T23:30:30Z`.")
    __properties = ["Duration", "Expiration"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TimeInForceRequest:
        """Create an instance of TimeInForceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TimeInForceRequest:
        """Create an instance of TimeInForceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TimeInForceRequest.parse_obj(obj)

        _obj = TimeInForceRequest.parse_obj({
            "duration": obj.get("Duration"),
            "expiration": obj.get("Expiration")
        })
        return _obj


