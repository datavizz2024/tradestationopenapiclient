# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.ask_quote import AskQuote
from openapi_client.models.bid_quote import BidQuote

class MarketDepthQuote(BaseModel):
    """
    Contains a single market depth quote for a price, side, and participant.
    """
    bids: Optional[conlist(BidQuote)] = Field(None, alias="Bids", description="Contains bid quotes, ordered from high to low price")
    asks: Optional[conlist(AskQuote)] = Field(None, alias="Asks", description="Contains ask quotes, ordered from low to high price")
    __properties = ["Bids", "Asks"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MarketDepthQuote:
        """Create an instance of MarketDepthQuote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in bids (list)
        _items = []
        if self.bids:
            for _item in self.bids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Bids'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in asks (list)
        _items = []
        if self.asks:
            for _item in self.asks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Asks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MarketDepthQuote:
        """Create an instance of MarketDepthQuote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MarketDepthQuote.parse_obj(obj)

        _obj = MarketDepthQuote.parse_obj({
            "bids": [BidQuote.from_dict(_item) for _item in obj.get("Bids")] if obj.get("Bids") is not None else None,
            "asks": [AskQuote.from_dict(_item) for _item in obj.get("Asks")] if obj.get("Asks") is not None else None
        })
        return _obj


