# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.activation_trigger import ActivationTrigger

class ActivationTriggers(BaseModel):
    """
    The trigger type allows you to specify the type of tick, number, and pattern of ticks that will trigger a specific row of an activation rule.
    """
    activation_triggers: Optional[conlist(ActivationTrigger)] = Field(None, alias="ActivationTriggers")
    __properties = ["ActivationTriggers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ActivationTriggers:
        """Create an instance of ActivationTriggers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in activation_triggers (list)
        _items = []
        if self.activation_triggers:
            for _item in self.activation_triggers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ActivationTriggers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ActivationTriggers:
        """Create an instance of ActivationTriggers from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ActivationTriggers.parse_obj(obj)

        _obj = ActivationTriggers.parse_obj({
            "activation_triggers": [ActivationTrigger.from_dict(_item) for _item in obj.get("ActivationTriggers")] if obj.get("ActivationTriggers") is not None else None
        })
        return _obj


