# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from openapi_client.models.heartbeat1 import Heartbeat1
from openapi_client.models.quote_stream import QuoteStream
from openapi_client.models.stream_error_response import StreamErrorResponse
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

GETQUOTECHANGESTREAM200RESPONSE_ANY_OF_SCHEMAS = [
    "Heartbeat1",
    "QuoteStream",
    "StreamErrorResponse",
]


class GetQuoteChangeStream200Response(BaseModel):
    """
    GetQuoteChangeStream200Response
    """

    # data type: QuoteStream
    anyof_schema_1_validator: Optional[QuoteStream] = None
    # data type: Heartbeat1
    anyof_schema_2_validator: Optional[Heartbeat1] = None
    # data type: StreamErrorResponse
    anyof_schema_3_validator: Optional[StreamErrorResponse] = None
    if TYPE_CHECKING:
        actual_instance: Union[Heartbeat1, QuoteStream, StreamErrorResponse]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(GETQUOTECHANGESTREAM200RESPONSE_ANY_OF_SCHEMAS)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = GetQuoteChangeStream200Response.construct()
        error_messages = []
        # validate data type: QuoteStream
        if not isinstance(v, QuoteStream):
            error_messages.append(f"Error! Input type `{type(v)}` is not `QuoteStream`")
        else:
            return v

        # validate data type: Heartbeat1
        if not isinstance(v, Heartbeat1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Heartbeat1`")
        else:
            return v

        # validate data type: StreamErrorResponse
        if not isinstance(v, StreamErrorResponse):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `StreamErrorResponse`"
            )
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in GetQuoteChangeStream200Response with anyOf schemas: Heartbeat1, QuoteStream, StreamErrorResponse. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> GetQuoteChangeStream200Response:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> GetQuoteChangeStream200Response:
        """Returns the object represented by the json string"""
        instance = GetQuoteChangeStream200Response.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[QuoteStream] = None
        try:
            instance.actual_instance = QuoteStream.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[Heartbeat1] = None
        try:
            instance.actual_instance = Heartbeat1.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[StreamErrorResponse] = None
        try:
            instance.actual_instance = StreamErrorResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into GetQuoteChangeStream200Response with anyOf schemas: Heartbeat1, QuoteStream, StreamErrorResponse. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())
