# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class RiskRewardAnalysisInputLeg(BaseModel):
    """
    Provides information about one leg of a potential option spread trade.
    """
    symbol: StrictStr = Field(..., alias="Symbol", description="Option contract symbol or underlying symbol to be traded for this leg.")
    quantity: StrictInt = Field(..., alias="Quantity", description="The number of option contracts to buy or sell for this leg. The value cannot be zero.")
    trade_action: StrictStr = Field(..., alias="TradeAction", description="The kind of trade to place for this leg. Value values are `BUY` and `SELL`.")
    __properties = ["Symbol", "Quantity", "TradeAction"]

    @validator('trade_action')
    def trade_action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('BUY', 'SELL'):
            raise ValueError("must be one of enum values ('BUY', 'SELL')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RiskRewardAnalysisInputLeg:
        """Create an instance of RiskRewardAnalysisInputLeg from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RiskRewardAnalysisInputLeg:
        """Create an instance of RiskRewardAnalysisInputLeg from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RiskRewardAnalysisInputLeg.parse_obj(obj)

        _obj = RiskRewardAnalysisInputLeg.parse_obj({
            "symbol": obj.get("Symbol"),
            "quantity": obj.get("Quantity"),
            "trade_action": obj.get("TradeAction")
        })
        return _obj


