# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.account_totals import AccountTotals
from openapi_client.models.interest import Interest

class WalletsStream(BaseModel):
    """
    Returns the details of a currency holding.
    """
    account_id: Optional[StrictStr] = Field(None, alias="AccountID", description="TradeStation Account ID.")
    account_totals: Optional[AccountTotals] = Field(None, alias="AccountTotals")
    average_price: Optional[StrictStr] = Field(None, alias="AveragePrice", description="Average price of all positions for the current symbol.")
    balance: Optional[StrictStr] = Field(None, alias="Balance", description="The balance of the specific currency in the wallet.")
    balance_account_currency: Optional[StrictStr] = Field(None, alias="BalanceAccountCurrency", description="The balance of the specific currency in the wallet (specified in the user’s account currency).")
    balance_available_for_trading: Optional[StrictStr] = Field(None, alias="BalanceAvailableForTrading", description="The balance of the specific currency in the wallet that can be used to make trades.")
    balance_available_for_trading_account_currency: Optional[StrictStr] = Field(None, alias="BalanceAvailableForTradingAccountCurrency", description="The balance of the specific currency in the wallet that can be used to make trades (specified in the user’s account currency).")
    balance_available_for_withdrawal: Optional[StrictStr] = Field(None, alias="BalanceAvailableForWithdrawal", description="The balance of the specific currency in the wallet that can be withdrawn.")
    balance_available_for_withdrawal_account_currency: Optional[StrictStr] = Field(None, alias="BalanceAvailableForWithdrawalAccountCurrency", description="The balance of the specific currency in the wallet that can be withdrawn (specified in the user’s account currency).")
    currency: Optional[StrictStr] = Field(None, alias="Currency", description="The currency of the wallet.")
    interest: Optional[Interest] = Field(None, alias="Interest")
    interest_rate: Optional[StrictStr] = Field(None, alias="InterestRate", description="The currency's interest rate.")
    status: Optional[StrictStr] = Field(None, alias="Status", description="The status of this wallet - Active, Suspended.")
    unrealized_profit_loss_account_currency: Optional[StrictStr] = Field(None, alias="UnrealizedProfitLossAccountCurrency", description="The unrealized profit or loss for the specific currency in the wallet (specified in the user’s account currency).")
    __properties = ["AccountID", "AccountTotals", "AveragePrice", "Balance", "BalanceAccountCurrency", "BalanceAvailableForTrading", "BalanceAvailableForTradingAccountCurrency", "BalanceAvailableForWithdrawal", "BalanceAvailableForWithdrawalAccountCurrency", "Currency", "Interest", "InterestRate", "Status", "UnrealizedProfitLossAccountCurrency"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WalletsStream:
        """Create an instance of WalletsStream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of account_totals
        if self.account_totals:
            _dict['AccountTotals'] = self.account_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest
        if self.interest:
            _dict['Interest'] = self.interest.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WalletsStream:
        """Create an instance of WalletsStream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WalletsStream.parse_obj(obj)

        _obj = WalletsStream.parse_obj({
            "account_id": obj.get("AccountID"),
            "account_totals": AccountTotals.from_dict(obj.get("AccountTotals")) if obj.get("AccountTotals") is not None else None,
            "average_price": obj.get("AveragePrice"),
            "balance": obj.get("Balance"),
            "balance_account_currency": obj.get("BalanceAccountCurrency"),
            "balance_available_for_trading": obj.get("BalanceAvailableForTrading"),
            "balance_available_for_trading_account_currency": obj.get("BalanceAvailableForTradingAccountCurrency"),
            "balance_available_for_withdrawal": obj.get("BalanceAvailableForWithdrawal"),
            "balance_available_for_withdrawal_account_currency": obj.get("BalanceAvailableForWithdrawalAccountCurrency"),
            "currency": obj.get("Currency"),
            "interest": Interest.from_dict(obj.get("Interest")) if obj.get("Interest") is not None else None,
            "interest_rate": obj.get("InterestRate"),
            "status": obj.get("Status"),
            "unrealized_profit_loss_account_currency": obj.get("UnrealizedProfitLossAccountCurrency")
        })
        return _obj


