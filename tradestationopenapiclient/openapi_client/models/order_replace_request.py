# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.advanced_options_replace import AdvancedOptionsReplace

class OrderReplaceRequest(BaseModel):
    """
    Describes the order properties which are being updated. Requires at least one updated property.
    """
    limit_price: Optional[StrictStr] = Field(None, alias="LimitPrice", description="The limit price for this order.")
    stop_price: Optional[StrictStr] = Field(None, alias="StopPrice", description="The stop price for this order. If a TrailingStop amount or percent is passed in with the request (in the AdvancedOptions), and a StopPrice value is also passed in, the StopPrice value is ignored.")
    order_type: Optional[StrictStr] = Field(None, alias="OrderType", description="The order type of this order. Order type can only be updated to `Market`.")
    quantity: Optional[StrictStr] = Field(None, alias="Quantity", description="The quantity of this order.")
    advanced_options: Optional[AdvancedOptionsReplace] = Field(None, alias="AdvancedOptions")
    __properties = ["LimitPrice", "StopPrice", "OrderType", "Quantity", "AdvancedOptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderReplaceRequest:
        """Create an instance of OrderReplaceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of advanced_options
        if self.advanced_options:
            _dict['AdvancedOptions'] = self.advanced_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderReplaceRequest:
        """Create an instance of OrderReplaceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderReplaceRequest.parse_obj(obj)

        _obj = OrderReplaceRequest.parse_obj({
            "limit_price": obj.get("LimitPrice"),
            "stop_price": obj.get("StopPrice"),
            "order_type": obj.get("OrderType"),
            "quantity": obj.get("Quantity"),
            "advanced_options": AdvancedOptionsReplace.from_dict(obj.get("AdvancedOptions")) if obj.get("AdvancedOptions") is not None else None
        })
        return _obj


