# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.account_detail import AccountDetail


class Account(BaseModel):
    """
    Contains brokerage account information for individual brokerage accounts.
    """

    account_detail: Optional[AccountDetail] = Field(None, alias="AccountDetail")
    account_id: StrictStr
    account_type: Optional[StrictStr] = Field(
        None,
        alias="AccountType",
        description="The type of the TradeStation Account. Valid values are: `Cash`, `Margin`, `Futures`, `DVP`, and `Crypto`.",
    )
    alias: Optional[StrictStr] = Field(
        None,
        alias="Alias",
        description="A user specified name that identifies a TradeStation account. Omits if not set.",
    )
    alt_id: Optional[StrictStr] = Field(
        None,
        alias="AltID",
        description="TradeStation account ID for accounts based in Japan. Omits if not set.",
    )
    currency: Optional[StrictStr] = Field(
        None, alias="Currency", description="Currency associated with this account."
    )
    status: Optional[StrictStr] = Field(
        None,
        alias="Status",
        description="Status of a specific account: - Active - Closed - Closing Transaction Only - Margin Call - Closing Transactions Only - Inactive - Liquidating Transactions Only - Restricted - 90 Day Restriction-Closing Transaction Only",
    )
    __properties = [
        "AccountDetail",
        "AccountID",
        "AccountType",
        "Alias",
        "AltID",
        "Currency",
        "Status",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Account:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of account_detail
        if self.account_detail:
            _dict["AccountDetail"] = self.account_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Account:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Account.parse_obj(obj)

        _obj = Account.parse_obj(
            {
                "account_detail": AccountDetail.from_dict(obj.get("AccountDetail"))
                if obj.get("AccountDetail") is not None
                else None,
                "account_id": obj.get("AccountID"),
                "account_type": obj.get("AccountType"),
                "alias": obj.get("Alias"),
                "alt_id": obj.get("AltID"),
                "currency": obj.get("Currency"),
                "status": obj.get("Status"),
            }
        )
        return _obj
