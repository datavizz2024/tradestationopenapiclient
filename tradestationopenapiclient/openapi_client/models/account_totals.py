# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class AccountTotals(BaseModel):
    """
    Total amount of balance, accrued, and paid interest across all wallets in the user's account currency.
    """
    accrued_interest_account_currency: Optional[StrictStr] = Field(None, alias="AccruedInterestAccountCurrency", description="Total unpaid monthly interest accrued for all wallets in the account (specified in the user's account currency).")
    balance_account_currency: Optional[StrictStr] = Field(None, alias="BalanceAccountCurrency", description="Total balance for all wallets in the account (specified in the user’s account currency).")
    balance_available_for_trading_account_currency: Optional[StrictStr] = Field(None, alias="BalanceAvailableForTradingAccountCurrency", description="Total balance for all wallets in the account that can be used to make trades (specified in the user’s account currency).")
    balance_available_for_withdrawal_account_currency: Optional[StrictStr] = Field(None, alias="BalanceAvailableForWithdrawalAccountCurrency", description="Total balance for all wallets in the account that can be withdrawn (specified in the user’s account currency).")
    total_paid_interest_account_currency: Optional[StrictStr] = Field(None, alias="TotalPaidInterestAccountCurrency", description="Total interest paid for all wallets in the account (specified in the user's account currency).")
    ytd_paid_interest_account_currency: Optional[StrictStr] = Field(None, alias="YTDPaidInterestAccountCurrency", description="Total year-to-date interest paid for all wallets in the account (specified the user's account currency).")
    __properties = ["AccruedInterestAccountCurrency", "BalanceAccountCurrency", "BalanceAvailableForTradingAccountCurrency", "BalanceAvailableForWithdrawalAccountCurrency", "TotalPaidInterestAccountCurrency", "YTDPaidInterestAccountCurrency"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountTotals:
        """Create an instance of AccountTotals from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountTotals:
        """Create an instance of AccountTotals from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountTotals.parse_obj(obj)

        _obj = AccountTotals.parse_obj({
            "accrued_interest_account_currency": obj.get("AccruedInterestAccountCurrency"),
            "balance_account_currency": obj.get("BalanceAccountCurrency"),
            "balance_available_for_trading_account_currency": obj.get("BalanceAvailableForTradingAccountCurrency"),
            "balance_available_for_withdrawal_account_currency": obj.get("BalanceAvailableForWithdrawalAccountCurrency"),
            "total_paid_interest_account_currency": obj.get("TotalPaidInterestAccountCurrency"),
            "ytd_paid_interest_account_currency": obj.get("YTDPaidInterestAccountCurrency")
        })
        return _obj


