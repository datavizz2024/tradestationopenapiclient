# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Any
from pydantic import BaseModel, Field, StrictStr


class OrderResponse(BaseModel):
    """
    OrderResponse is the response from placing a trade (OrderRequest).
    """

    error: Optional[Any] = Field(None, alias="Error")
    message: Optional[Any] = Field(None, alias="Message")
    order_id: Optional[Any] = Field(None, alias="OrderID")
    __properties = ["Error", "Message", "OrderID"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderResponse:
        """Create an instance of OrderResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderResponse:
        """Create an instance of OrderResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderResponse.parse_obj(obj)

        _obj = OrderResponse.parse_obj(
            {
                "error": obj.get("Error"),
                "message": obj.get("Message"),
                "order_id": obj.get("OrderID"),
            }
        )
        return _obj
