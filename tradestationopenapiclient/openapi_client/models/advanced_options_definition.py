# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conint, conlist
from openapi_client.models.market_activation_rule_definition import (
    MarketActivationRuleDefinition,
)
from openapi_client.models.time_activation_rule_definition import (
    TimeActivationRuleDefinition,
)
from openapi_client.models.trailing_stop_definition import TrailingStopDefinition


class AdvancedOptionsDefinition(BaseModel):
    """
    Advanced Options for an order
    """

    trailing_stop: Optional[TrailingStopDefinition] = Field(None, alias="TrailingStop")
    market_activation_rules: Optional[conlist(MarketActivationRuleDefinition)] = Field(
        None,
        alias="MarketActivationRules",
        description="Set of market-based activation rules that must be met before order is sent to the exchange. Max 4 rules. ",
    )
    time_activation_rules: Optional[conlist(TimeActivationRuleDefinition)] = Field(
        None,
        alias="TimeActivationRules",
        description="Set of time-based activation rules that must be met before order is sent to the exchange. Max 1 rule. ",
    )
    show_only_quantity: Optional[conint(strict=True, gt=0)] = Field(
        None,
        alias="ShowOnlyQuantity",
        description="Number of shares to submit to market at a time for this order. Valid for futures and equities orders. For equities, must be multiple of 100. ",
    )
    __properties = [
        "TrailingStop",
        "MarketActivationRules",
        "TimeActivationRules",
        "ShowOnlyQuantity",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvancedOptionsDefinition:
        """Create an instance of AdvancedOptionsDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of trailing_stop
        if self.trailing_stop:
            _dict["TrailingStop"] = self.trailing_stop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in market_activation_rules (list)
        _items = []
        if self.market_activation_rules:
            for _item in self.market_activation_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict["MarketActivationRules"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in time_activation_rules (list)
        _items = []
        if self.time_activation_rules:
            for _item in self.time_activation_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict["TimeActivationRules"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvancedOptionsDefinition:
        """Create an instance of AdvancedOptionsDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvancedOptionsDefinition.parse_obj(obj)

        _obj = AdvancedOptionsDefinition.parse_obj(
            {
                "trailing_stop": TrailingStopDefinition.from_dict(
                    obj.get("TrailingStop")
                )
                if obj.get("TrailingStop") is not None
                else None,
                "market_activation_rules": [
                    MarketActivationRuleDefinition.from_dict(_item)
                    for _item in obj.get("MarketActivationRules")
                ]
                if obj.get("MarketActivationRules") is not None
                else None,
                "time_activation_rules": [
                    TimeActivationRuleDefinition.from_dict(_item)
                    for _item in obj.get("TimeActivationRules")
                ]
                if obj.get("TimeActivationRules") is not None
                else None,
                "show_only_quantity": obj.get("ShowOnlyQuantity"),
            }
        )
        return _obj
