# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CurrencyDetail(BaseModel):
    """
    Contains currency detail information which varies according to account type.
    """
    account_conversion_rate: Optional[StrictStr] = Field(None, alias="AccountConversionRate", description="Indicates the rate used to convert from the currency of the symbol to the currency of the account.")
    account_margin_requirement: Optional[StrictStr] = Field(None, alias="AccountMarginRequirement", description="Indicates the value of real-time account margin requirement.")
    cash_balance: Optional[StrictStr] = Field(None, alias="CashBalance", description="Indicates the value of real-time cash balance.")
    commission: Optional[StrictStr] = Field(None, alias="Commission", description="(Futures) The brokerage commission cost and routing fees (if applicable) for a trade based on the number of shares or contracts.")
    currency: Optional[StrictStr] = Field(None, alias="Currency", description="Currency is the currency this account is traded in.")
    initial_margin: Optional[StrictStr] = Field(None, alias="InitialMargin", description="Indicates the value of real-time initial margin.")
    maintenance_margin: Optional[StrictStr] = Field(None, alias="MaintenanceMargin", description="Indicates the value of real-time maintance margin.")
    realized_profit_loss: Optional[StrictStr] = Field(None, alias="RealizedProfitLoss", description="Indicates the value of real-time realized profit or loss.")
    unrealized_profit_loss: Optional[StrictStr] = Field(None, alias="UnrealizedProfitLoss", description="Indicates the value of real-time unrealized profit or loss.")
    __properties = ["AccountConversionRate", "AccountMarginRequirement", "CashBalance", "Commission", "Currency", "InitialMargin", "MaintenanceMargin", "RealizedProfitLoss", "UnrealizedProfitLoss"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CurrencyDetail:
        """Create an instance of CurrencyDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CurrencyDetail:
        """Create an instance of CurrencyDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CurrencyDetail.parse_obj(obj)

        _obj = CurrencyDetail.parse_obj({
            "account_conversion_rate": obj.get("AccountConversionRate"),
            "account_margin_requirement": obj.get("AccountMarginRequirement"),
            "cash_balance": obj.get("CashBalance"),
            "commission": obj.get("Commission"),
            "currency": obj.get("Currency"),
            "initial_margin": obj.get("InitialMargin"),
            "maintenance_margin": obj.get("MaintenanceMargin"),
            "realized_profit_loss": obj.get("RealizedProfitLoss"),
            "unrealized_profit_loss": obj.get("UnrealizedProfitLoss")
        })
        return _obj


