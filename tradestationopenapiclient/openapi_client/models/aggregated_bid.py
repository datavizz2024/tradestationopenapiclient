# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class AggregatedBid(BaseModel):
    """
    AggregatedBid
    """
    earliest_time: Optional[datetime] = Field(None, alias="EarliestTime", description="The earliest participant timestamp for this quote, represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.  E.g. `2022-06-28T12:34:01Z`.")
    latest_time: Optional[datetime] = Field(None, alias="LatestTime", description="The latest participant timestamp for this quote, represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.  E.g. `2022-06-28T12:34:56Z`.")
    side: Optional[StrictStr] = Field(None, alias="Side", description="The `Bid` side of the quote.")
    price: Optional[StrictStr] = Field(None, alias="Price", description="The price of the quote.")
    total_size: Optional[StrictStr] = Field(None, alias="TotalSize", description="The total number of shares requested by all participants for the Bid.")
    biggest_size: Optional[StrictStr] = Field(None, alias="BiggestSize", description="The largest number of shares requested by any participant for the Bid.")
    smallest_size: Optional[StrictStr] = Field(None, alias="SmallestSize", description="The smallest number of shares requested by any participant for the Bid.")
    num_participants: Optional[StrictInt] = Field(None, alias="NumParticipants", description="The number of participants requesting this Bid price.")
    total_order_count: Optional[StrictInt] = Field(None, alias="TotalOrderCount", description="The sum of the order counts for all participants requesting this Bid price. For options the TotalOrderCount will always be 0 because this information is not reported by the exchange.")
    __properties = ["EarliestTime", "LatestTime", "Side", "Price", "TotalSize", "BiggestSize", "SmallestSize", "NumParticipants", "TotalOrderCount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AggregatedBid:
        """Create an instance of AggregatedBid from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AggregatedBid:
        """Create an instance of AggregatedBid from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AggregatedBid.parse_obj(obj)

        _obj = AggregatedBid.parse_obj({
            "earliest_time": obj.get("EarliestTime"),
            "latest_time": obj.get("LatestTime"),
            "side": obj.get("Side"),
            "price": obj.get("Price"),
            "total_size": obj.get("TotalSize"),
            "biggest_size": obj.get("BiggestSize"),
            "smallest_size": obj.get("SmallestSize"),
            "num_participants": obj.get("NumParticipants"),
            "total_order_count": obj.get("TotalOrderCount")
        })
        return _obj


