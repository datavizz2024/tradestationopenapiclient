# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist
from openapi_client.models.risk_reward_analysis_input_leg import RiskRewardAnalysisInputLeg

class RiskRewardAnalysisInput(BaseModel):
    """
    Provides the required information to analyze the risk vs. reward of a potential option spread trade.
    """
    spread_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="SpreadPrice", description="The quoted price for the option spread trade.")
    legs: Optional[conlist(RiskRewardAnalysisInputLeg)] = Field(None, alias="Legs", description="The legs of the option spread trade. If more than one leg is specified, the expiration dates must all be the same. In addition, leg symbols must be of type stock, stock option, or index option.")
    __properties = ["SpreadPrice", "Legs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RiskRewardAnalysisInput:
        """Create an instance of RiskRewardAnalysisInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in legs (list)
        _items = []
        if self.legs:
            for _item in self.legs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Legs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RiskRewardAnalysisInput:
        """Create an instance of RiskRewardAnalysisInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RiskRewardAnalysisInput.parse_obj(obj)

        _obj = RiskRewardAnalysisInput.parse_obj({
            "spread_price": obj.get("SpreadPrice"),
            "legs": [RiskRewardAnalysisInputLeg.from_dict(_item) for _item in obj.get("Legs")] if obj.get("Legs") is not None else None
        })
        return _obj


