# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator

class OrderLeg(BaseModel):
    """
    OrderLeg is an object returned from WebAPI.
    """
    asset_type: Optional[StrictStr] = Field(None, alias="AssetType", description="Indicates the asset type of the order.")
    buy_or_sell: Optional[StrictStr] = Field(None, alias="BuyOrSell", description="Is this a `BUY` or `SELL` leg.")
    exec_quantity: Optional[StrictStr] = Field(None, alias="ExecQuantity", description="Number of shares that have been executed.")
    expiration_date: Optional[StrictStr] = Field(None, alias="ExpirationDate", description="The expiration date of the future or option symbol.")
    open_or_close: Optional[StrictStr] = Field(None, alias="OpenOrClose", description="What kind of order leg - Opening or Closing.")
    quantity_ordered: Optional[StrictStr] = Field(None, alias="QuantityOrdered", description="Number of shares or contracts being purchased or sold.")
    quantity_remaining: Optional[StrictStr] = Field(None, alias="QuantityRemaining", description="In a partially filled order, this is the number of shares or contracts that were unfilled.")
    symbol: Optional[StrictStr] = Field(None, alias="Symbol", description="Symbol for the leg order.")
    underlying: Optional[StrictStr] = Field(None, alias="Underlying", description="Underlying Symbol associated. Only applies to Futures and Options.")
    __properties = ["AssetType", "BuyOrSell", "ExecQuantity", "ExpirationDate", "OpenOrClose", "QuantityOrdered", "QuantityRemaining", "Symbol", "Underlying"]

    @validator('asset_type')
    def asset_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNKNOWN', 'STOCK', 'STOCKOPTION', 'FUTURE', 'FUTUREOPTION', 'FOREX', 'CURRENCYOPTION', 'INDEX', 'INDEXOPTION', 'CRYPTO'):
            raise ValueError("must be one of enum values ('UNKNOWN', 'STOCK', 'STOCKOPTION', 'FUTURE', 'FUTUREOPTION', 'FOREX', 'CURRENCYOPTION', 'INDEX', 'INDEXOPTION', 'CRYPTO')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderLeg:
        """Create an instance of OrderLeg from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderLeg:
        """Create an instance of OrderLeg from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderLeg.parse_obj(obj)

        _obj = OrderLeg.parse_obj({
            "asset_type": obj.get("AssetType"),
            "buy_or_sell": obj.get("BuyOrSell"),
            "exec_quantity": obj.get("ExecQuantity"),
            "expiration_date": obj.get("ExpirationDate"),
            "open_or_close": obj.get("OpenOrClose"),
            "quantity_ordered": obj.get("QuantityOrdered"),
            "quantity_remaining": obj.get("QuantityRemaining"),
            "symbol": obj.get("Symbol"),
            "underlying": obj.get("Underlying")
        })
        return _obj


