# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class Strikes(BaseModel):
    """
    Provides a list of the available strikes for a specific spread type.
    """
    spread_type: Optional[StrictStr] = Field(None, alias="SpreadType", description="Name of the spread type for these strikes.")
    strikes: Optional[conlist(conlist(StrictStr))] = Field(None, alias="Strikes", description="Array of the strike prices for this spread type. Each element in the Strikes array is an array of strike prices for a single spread.")
    __properties = ["SpreadType", "Strikes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Strikes:
        """Create an instance of Strikes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Strikes:
        """Create an instance of Strikes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Strikes.parse_obj(obj)

        _obj = Strikes.parse_obj({
            "spread_type": obj.get("SpreadType"),
            "strikes": obj.get("Strikes")
        })
        return _obj


