# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from openapi_client.models.status_definition import StatusDefinition

class TickbarDefinition(BaseModel):
    """
    Standard tickbar data object for streaming tick bars with stream/tickbars/...
    """
    close: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Close", description="Close price of current bar.")
    status: Optional[StatusDefinition] = Field(None, alias="Status")
    time_stamp: Optional[StrictStr] = Field(None, alias="TimeStamp", description="Epoch timestamp.")
    total_volume: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="TotalVolume", description="The total volume of shares or contracts.")
    __properties = ["Close", "Status", "TimeStamp", "TotalVolume"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TickbarDefinition:
        """Create an instance of TickbarDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['Status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TickbarDefinition:
        """Create an instance of TickbarDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TickbarDefinition.parse_obj(obj)

        _obj = TickbarDefinition.parse_obj({
            "close": obj.get("Close"),
            "status": StatusDefinition.from_dict(obj.get("Status")) if obj.get("Status") is not None else None,
            "time_stamp": obj.get("TimeStamp"),
            "total_volume": obj.get("TotalVolume")
        })
        return _obj


