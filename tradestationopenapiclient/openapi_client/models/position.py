# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from openapi_client.models.position_direction1 import PositionDirection1


class Position(BaseModel):
    """
    Position
    """

    account_id: Optional[StrictStr] = Field(
        None, alias="AccountID", description="TradeStation Account ID."
    )
    asset_type: Optional[StrictStr] = Field(
        None, alias="AssetType", description="Indicates the asset type of the position."
    )
    average_price: Optional[StrictStr] = Field(
        None,
        alias="AveragePrice",
        description="The average price of the position currently held.",
    )
    bid: Optional[StrictStr] = Field(
        None,
        alias="Bid",
        description="The highest price a prospective buyer is prepared to pay at a particular time for a trading unit of a given symbol.",
    )
    ask: Optional[StrictStr] = Field(
        None,
        alias="Ask",
        description="The price at which a security futures contract or other financial instrument is offered for sale.",
    )
    conversion_rate: Optional[StrictStr] = Field(
        None,
        alias="ConversionRate",
        description="The currency conversion rate that is used in order to convert from the currency of the symbol to the currency of the account.",
    )
    deleted: Optional[StrictBool] = Field(
        None,
        alias="Deleted",
        description="Indicates that a position has been deleted (i.e., closed) since the last stream update. This property is returned only when the value is true, and only alongside a valid `PositionID` (other properties are omitted).",
    )
    day_trade_requirement: Optional[StrictStr] = Field(
        None,
        alias="DayTradeRequirement",
        description="(Futures) DayTradeMargin used on open positions. Currently only calculated for futures positions. Other asset classes will have a 0 for this value.",
    )
    expiration_date: Optional[StrictStr] = Field(
        None,
        alias="ExpirationDate",
        description="The UTC formatted expiration date of the future or option symbol in the country the contract is traded in. The time portion of the value should be ignored.",
    )
    initial_requirement: Optional[StrictStr] = Field(
        None,
        alias="InitialRequirement",
        description="Only applies to future and option positions. The margin account balance denominated in the symbol currency required for entering a position on margin.",
    )
    last: Optional[StrictStr] = Field(
        None, alias="Last", description="The last price at which the symbol traded."
    )
    long_short: Optional[PositionDirection1] = Field(None, alias="LongShort")
    mark_to_market_price: Optional[StrictStr] = Field(
        None,
        alias="MarkToMarketPrice",
        description="Only applies to equity and option positions. The MarkToMarketPrice value is the weighted average of the previous close price for the position quantity held overnight and the purchase price of the position quantity opened during the current market session. This value is used to calculate TodaysProfitLoss.",
    )
    market_value: Optional[StrictStr] = Field(
        None,
        alias="MarketValue",
        description="The actual market value denominated in the symbol currency of the open position. This value is updated in real-time.",
    )
    position_id: Optional[StrictStr] = Field(
        None, alias="PositionID", description="A unique identifier for the position."
    )
    quantity: Optional[StrictStr] = Field(
        None,
        alias="Quantity",
        description="The number of shares or contracts for a particular position. This value is negative for short positions.",
    )
    symbol: StrictStr
    timestamp: Optional[datetime] = Field(
        None, alias="Timestamp", description="Time the position was entered."
    )
    todays_profit_loss: Optional[StrictStr] = Field(
        None,
        alias="TodaysProfitLoss",
        description="Only applies to equity and option positions. This value will be included in the payload to convey the unrealized profit or loss denominated in the account currency on the position held calculated using the MarkToMarketPrice.",
    )
    total_cost: Optional[StrictStr] = Field(
        None,
        alias="TotalCost",
        description="The total cost denominated in the account currency of the open position.",
    )
    unrealized_profit_loss: Optional[StrictStr] = Field(
        None,
        alias="UnrealizedProfitLoss",
        description="The unrealized profit or loss denominated in the symbol currency on the position held calculated based on the average price of the position.",
    )
    unrealized_profit_loss_percent: Optional[StrictStr] = Field(
        None,
        alias="UnrealizedProfitLossPercent",
        description="The unrealized profit or loss on the position expressed as a percentage of the initial value of the position.",
    )
    unrealized_profit_loss_qty: Optional[StrictStr] = Field(
        None,
        alias="UnrealizedProfitLossQty",
        description="The unrealized profit or loss denominated in the account currency divided by the number of shares contracts or units held.",
    )
    __properties = [
        "AccountID",
        "AssetType",
        "AveragePrice",
        "Bid",
        "Ask",
        "ConversionRate",
        "Deleted",
        "DayTradeRequirement",
        "ExpirationDate",
        "InitialRequirement",
        "Last",
        "LongShort",
        "MarkToMarketPrice",
        "MarketValue",
        "PositionID",
        "Quantity",
        "Symbol",
        "Timestamp",
        "TodaysProfitLoss",
        "TotalCost",
        "UnrealizedProfitLoss",
        "UnrealizedProfitLossPercent",
        "UnrealizedProfitLossQty",
    ]

    @validator("asset_type")
    def asset_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("STOCK", "STOCKOPTION", "FUTURE", "INDEXOPTION"):
            raise ValueError(
                "must be one of enum values ('STOCK', 'STOCKOPTION', 'FUTURE', 'INDEXOPTION')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Position:
        """Create an instance of Position from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Position:
        """Create an instance of Position from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Position.parse_obj(obj)

        _obj = Position.parse_obj(
            {
                "account_id": obj.get("AccountID"),
                "asset_type": obj.get("AssetType"),
                "average_price": obj.get("AveragePrice"),
                "bid": obj.get("Bid"),
                "ask": obj.get("Ask"),
                "conversion_rate": obj.get("ConversionRate"),
                "deleted": obj.get("Deleted"),
                "day_trade_requirement": obj.get("DayTradeRequirement"),
                "expiration_date": obj.get("ExpirationDate"),
                "initial_requirement": obj.get("InitialRequirement"),
                "last": obj.get("Last"),
                "long_short": obj.get("LongShort"),
                "mark_to_market_price": obj.get("MarkToMarketPrice"),
                "market_value": obj.get("MarketValue"),
                "position_id": obj.get("PositionID"),
                "quantity": obj.get("Quantity"),
                "symbol": obj.get("Symbol"),
                "timestamp": obj.get("Timestamp"),
                "todays_profit_loss": obj.get("TodaysProfitLoss"),
                "total_cost": obj.get("TotalCost"),
                "unrealized_profit_loss": obj.get("UnrealizedProfitLoss"),
                "unrealized_profit_loss_percent": obj.get(
                    "UnrealizedProfitLossPercent"
                ),
                "unrealized_profit_loss_qty": obj.get("UnrealizedProfitLossQty"),
            }
        )
        return _obj
