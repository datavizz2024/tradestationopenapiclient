# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class RiskRewardAnalysisResult(BaseModel):
    """
    RiskRewardAnalysisResult
    """
    max_gain_is_infinite: Optional[StrictBool] = Field(None, alias="MaxGainIsInfinite", description="Indicates whether the maximum gain can be infinite.")
    adjusted_max_gain: Optional[StrictStr] = Field(None, alias="AdjustedMaxGain", description="The adjusted maximum gain (if it is not infinite).")
    max_loss_is_infinite: Optional[StrictBool] = Field(None, alias="MaxLossIsInfinite", description="Indicates whether the maximum loss can be infinite.")
    adjusted_max_loss: Optional[StrictStr] = Field(None, alias="AdjustedMaxLoss", description="The adjusted maximum loss (if it is not infinite).")
    breakeven_points: Optional[conlist(StrictStr)] = Field(None, alias="BreakevenPoints", description="Market price that the underlying security must reach for the trade to avoid a loss.")
    __properties = ["MaxGainIsInfinite", "AdjustedMaxGain", "MaxLossIsInfinite", "AdjustedMaxLoss", "BreakevenPoints"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RiskRewardAnalysisResult:
        """Create an instance of RiskRewardAnalysisResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RiskRewardAnalysisResult:
        """Create an instance of RiskRewardAnalysisResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RiskRewardAnalysisResult.parse_obj(obj)

        _obj = RiskRewardAnalysisResult.parse_obj({
            "max_gain_is_infinite": obj.get("MaxGainIsInfinite"),
            "adjusted_max_gain": obj.get("AdjustedMaxGain"),
            "max_loss_is_infinite": obj.get("MaxLossIsInfinite"),
            "adjusted_max_loss": obj.get("AdjustedMaxLoss"),
            "breakeven_points": obj.get("BreakevenPoints")
        })
        return _obj


