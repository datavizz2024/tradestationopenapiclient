# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, conint

class StatusDefinition(BaseModel):
    """
    Status value for Barcharts and Tickbars. Integer value represeting values through bit mappings
    """
    bit0: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`NEW`: Set on the first time the bar is sent")
    bit1: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`REAL_TIME_DATA`: Set when there is data in the bar and the data is being built in \"real time\"\" from a trade")
    bit2: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`HISTORICAL_DATA`: Set when there is data in the bar and the data is historical data, or is built from historical data")
    bit3: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`STANDARD_CLOSE`: Set when the bar is closed \"normally\" (e.g. a 2 tick tickchart bar was closed because of the second tick, a 10-min barchart was closed due to time, etc.)")
    bit4: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`END_OF_SESSION_CLOSE`: Set when the bar was closed \"prematurely\" due to the end of the trading session and the particular bar type is not meant to span trading sessions")
    bit5: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`UPDATE_CORPACTION`: Set when there was an update due to corporate action")
    bit6: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`UPDATE_CORRECTION`: Set when there was an update due to a market correction")
    bit7: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`ANALYSIS_BAR`: Set when the bar should not be considered except for analysis purposes")
    bit8: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`EXTENDED_BAR`: Set when the bar is linked with an extended transaction linked with the primary stream (i.e. Conversions)")
    bit19: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`PREV_DAY_CORRECTION`: Set when there was an update due to prev.day correction")
    bit23: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`AFTER_MARKET_CORRECTION`: Set when there was an update due to an after market correction")
    bit24: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`PHANTOM_BAR`: Set when the bar is synthetic - thus created only to fill gaps")
    bit25: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`EMPTY_BAR`: Set when the bar is an empty bar â€“ no market data for the bar period")
    bit26: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`BACKFILL_DATA`: Set when the bar is sent during backfill historical processing")
    bit27: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`ARCHIVE_DATA`: Set when the bar is sent during archive historical processing")
    bit28: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`GHOST_BAR`: Set when the bar is empty but specifically for the end session")
    bit29: Optional[conint(strict=True, le=1, ge=0)] = Field(None, description="`END_OF_HISTORY_STREAM`: Set on a bar to convey to consumer that all historical bars have been sent.  Historical bars are not guaranteed to be returned in order")
    __properties = ["bit0", "bit1", "bit2", "bit3", "bit4", "bit5", "bit6", "bit7", "bit8", "bit19", "bit23", "bit24", "bit25", "bit26", "bit27", "bit28", "bit29"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StatusDefinition:
        """Create an instance of StatusDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StatusDefinition:
        """Create an instance of StatusDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StatusDefinition.parse_obj(obj)

        _obj = StatusDefinition.parse_obj({
            "bit0": obj.get("bit0"),
            "bit1": obj.get("bit1"),
            "bit2": obj.get("bit2"),
            "bit3": obj.get("bit3"),
            "bit4": obj.get("bit4"),
            "bit5": obj.get("bit5"),
            "bit6": obj.get("bit6"),
            "bit7": obj.get("bit7"),
            "bit8": obj.get("bit8"),
            "bit19": obj.get("bit19"),
            "bit23": obj.get("bit23"),
            "bit24": obj.get("bit24"),
            "bit25": obj.get("bit25"),
            "bit26": obj.get("bit26"),
            "bit27": obj.get("bit27"),
            "bit28": obj.get("bit28"),
            "bit29": obj.get("bit29")
        })
        return _obj


