# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.trailing_stop import TrailingStop

class AdvancedOptionsReplace(BaseModel):
    """
    AdvancedOptionsReplace
    """
    show_only_quantity: Optional[StrictStr] = Field(None, alias="ShowOnlyQuantity", description="Hides the true number of shares intended to be bought or sold. Valid for `Limit` and `StopLimit` order types. Not valid for all exchanges. For Equities and Futures.")
    trailing_stop: Optional[TrailingStop] = Field(None, alias="TrailingStop")
    market_activation_rules: Optional[Dict[str, Any]] = Field(None, alias="MarketActivationRules")
    time_activation_rules: Optional[Dict[str, Any]] = Field(None, alias="TimeActivationRules")
    __properties = ["ShowOnlyQuantity", "TrailingStop", "MarketActivationRules", "TimeActivationRules"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvancedOptionsReplace:
        """Create an instance of AdvancedOptionsReplace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of trailing_stop
        if self.trailing_stop:
            _dict['TrailingStop'] = self.trailing_stop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_activation_rules
        if self.market_activation_rules:
            _dict['MarketActivationRules'] = self.market_activation_rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_activation_rules
        if self.time_activation_rules:
            _dict['TimeActivationRules'] = self.time_activation_rules.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvancedOptionsReplace:
        """Create an instance of AdvancedOptionsReplace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvancedOptionsReplace.parse_obj(obj)

        _obj = AdvancedOptionsReplace.parse_obj({
            "show_only_quantity": obj.get("ShowOnlyQuantity"),
            "trailing_stop": TrailingStop.from_dict(obj.get("TrailingStop")) if obj.get("TrailingStop") is not None else None,
            "market_activation_rules": MarketActivationRulesReplace.from_dict(obj.get("MarketActivationRules")) if obj.get("MarketActivationRules") is not None else None,
            "time_activation_rules": TimeActivationRulesReplace.from_dict(obj.get("TimeActivationRules")) if obj.get("TimeActivationRules") is not None else None
        })
        return _obj


