# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.increment_schedule_row import IncrementScheduleRow

class PriceFormat(BaseModel):
    """
    Conveys number formatting information for symbol price fields.
    """
    format: Optional[StrictStr] = Field(None, alias="Format", description="The format of the price.")
    decimals: Optional[StrictStr] = Field(None, alias="Decimals", description="The number of decimals precision, applies to the `Decimal` format only.")
    fraction: Optional[StrictStr] = Field(None, alias="Fraction", description="The denominator of the single fraction, i.e. `1/Fraction`, applies to the `Fraction` format only.")
    sub_fraction: Optional[StrictStr] = Field(None, alias="SubFraction", description="The additional fraction of a fraction denominator, applies to the `SubFraction` format only.")
    increment_style: Optional[StrictStr] = Field(None, alias="IncrementStyle", description="The style of increment for price movements.")
    increment: Optional[StrictStr] = Field(None, alias="Increment", description="The decimal increment for all price movements, applies to the `Simple` Increment Style only.")
    increment_schedule: Optional[conlist(IncrementScheduleRow)] = Field(None, alias="IncrementSchedule")
    point_value: Optional[StrictStr] = Field(None, alias="PointValue", description="The symbol's point value.")
    __properties = ["Format", "Decimals", "Fraction", "SubFraction", "IncrementStyle", "Increment", "IncrementSchedule", "PointValue"]

    @validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Decimal', 'Fraction', 'SubFraction'):
            raise ValueError("must be one of enum values ('Decimal', 'Fraction', 'SubFraction')")
        return value

    @validator('increment_style')
    def increment_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Simple', 'Schedule'):
            raise ValueError("must be one of enum values ('Simple', 'Schedule')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PriceFormat:
        """Create an instance of PriceFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in increment_schedule (list)
        _items = []
        if self.increment_schedule:
            for _item in self.increment_schedule:
                if _item:
                    _items.append(_item.to_dict())
            _dict['IncrementSchedule'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PriceFormat:
        """Create an instance of PriceFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PriceFormat.parse_obj(obj)

        _obj = PriceFormat.parse_obj({
            "format": obj.get("Format"),
            "decimals": obj.get("Decimals"),
            "fraction": obj.get("Fraction"),
            "sub_fraction": obj.get("SubFraction"),
            "increment_style": obj.get("IncrementStyle"),
            "increment": obj.get("Increment"),
            "increment_schedule": [IncrementScheduleRow.from_dict(_item) for _item in obj.get("IncrementSchedule")] if obj.get("IncrementSchedule") is not None else None,
            "point_value": obj.get("PointValue")
        })
        return _obj


