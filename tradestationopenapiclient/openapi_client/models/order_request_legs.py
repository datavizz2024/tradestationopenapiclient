# coding: utf-8

"""
    

    # Authentication For more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview). <SecurityDefinitions /> 

    The version of the OpenAPI document: 
    Contact: ClientServices@tradestation.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class OrderRequestLegs(BaseModel):
    """
    The legs of an order being submitted.
    """
    quantity: StrictStr = Field(..., alias="Quantity", description="The quantity of the order.")
    symbol: StrictStr = Field(..., alias="Symbol", description="The symbol used for this leg of the order.")
    trade_action: StrictStr = Field(..., alias="TradeAction", description="TradeAction represents the different trade actions that can be sent to or received from WebAPI. Conveys the intent of the trade: - `BUY` - crypto, equities and futures - `SELL` - crypto, equities and futures - `BUYTOCOVER` - equities - `SELLSHORT` - equities - `BUYTOOPEN` - options - `BUYTOCLOSE` - options - `SELLTOOPEN` - options - `SELLTOCLOSE` - options")
    __properties = ["Quantity", "Symbol", "TradeAction"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderRequestLegs:
        """Create an instance of OrderRequestLegs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderRequestLegs:
        """Create an instance of OrderRequestLegs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderRequestLegs.parse_obj(obj)

        _obj = OrderRequestLegs.parse_obj({
            "quantity": obj.get("Quantity"),
            "symbol": obj.get("Symbol"),
            "trade_action": obj.get("TradeAction")
        })
        return _obj


